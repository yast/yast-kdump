/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/kdump.ycp
 * Package:	Configuration of kdump
 * Summary:	Main file
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: kdump.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Main file for kdump configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of kdump</h3>
 */

textdomain "kdump";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("Kdump module started");

import "Progress";
import "Report";
import "Summary";
import "Popup";
import "String";
import "FileUtils";

import "CommandLine";
include "kdump/wizards.ycp";

include "kdump/uifunctions.ycp";

/**
 * Command line function for display options from kdump 
 *
 */
boolean cmdKdumpShow (map options) {
  CommandLine::Print("");
  //TRANSLATORS: CommandLine printed text  
  CommandLine::Print(String::UnderlinedHeader(_("Display Settings:"), 0));
  CommandLine::Print("");
  if (Kdump::crashkernel_param) {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("Kdump is enabled (boot option \"crashkernel\" is added)"));
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Allocate memory (MB) for kdump is: %1"), Kdump::alocated_memory)); 
     
  } else {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("Kdump is disabled"));
  }
  CommandLine::Print("");
  //TRANSLATORS: CommandLine printed text
  CommandLine::Print(sformat(_("Dump Level: %1"), Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"]:nil));
  CommandLine::Print("");
  //TRANSLATORS: CommandLine printed text
  CommandLine::Print(sformat(_("Dump Format: %1"), Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"]:nil));
  CommandLine::Print("");

  // parsing target info  
  CommandLine::Print(_("Dump Target Settings"));  
  if (SetUpKDUMP_SAVE_TARGET(Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]:nil)) {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("target: %1"), KDUMP_SAVE_TARGET["target"]:nil));

     //local filesystem
     if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("file directory: %1"), KDUMP_SAVE_TARGET["dir"]:nil));

     //ftp target
     } else if (KDUMP_SAVE_TARGET["target"]:nil == "ftp") {
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("server name: %1"),KDUMP_SAVE_TARGET["server"]:nil));
        
        if (KDUMP_SAVE_TARGET["port"]:nil != "") {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(sformat(_("port: %1"), KDUMP_SAVE_TARGET["port"]:nil));
        }
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("file directory: %1"), KDUMP_SAVE_TARGET["dir"]:nil));

        if ((KDUMP_SAVE_TARGET["user_name"]:nil == "") || 
           (KDUMP_SAVE_TARGET["user_name"]:nil == "anonymous")) {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(_("user name: anonymous connection is allowed"));
        } else {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(sformat(_("user name: %1"),KDUMP_SAVE_TARGET["user_name"]:nil));
        }

     //ssh connection
     } else if (KDUMP_SAVE_TARGET["target"]:nil == "ssh") {
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("server name: %1"), KDUMP_SAVE_TARGET["server"]:nil));        


        if (KDUMP_SAVE_TARGET["port"]:nil != "") {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(sformat(_("port: %1"), KDUMP_SAVE_TARGET["port"]:nil));
        }

        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("file directory: %1"), KDUMP_SAVE_TARGET["dir"]:nil));

        if ((KDUMP_SAVE_TARGET["user_name"]:nil != "") && 
           (KDUMP_SAVE_TARGET["user_name"]:nil != "anonymous")) {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(sformat(_("user name: %1"),KDUMP_SAVE_TARGET["user_name"]:nil));
        }

     // nfs target
     } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("server name: %1"), KDUMP_SAVE_TARGET["server"]:nil));
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("file directory: %1"), KDUMP_SAVE_TARGET["dir"]:nil));

     //cifs target
     } else if (KDUMP_SAVE_TARGET["target"]:nil == "cifs") {
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("server name: %1"), KDUMP_SAVE_TARGET["server"]:nil));
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("file directory: %1"), KDUMP_SAVE_TARGET["dir"]:nil));
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(sformat(_("share: %1"),KDUMP_SAVE_TARGET["share"]:nil)); 

        if ((KDUMP_SAVE_TARGET["user_name"]:nil == "") || 
           (KDUMP_SAVE_TARGET["user_name"]:nil == "anonymous")) {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(_("user name: anonymous connection is allowed"));
        } else {
           //TRANSLATORS: CommandLine printed text
           CommandLine::Print(sformat(_("user name: %1"),KDUMP_SAVE_TARGET["user_name"]:nil));
        }


     }
  } else {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("EMPTY"));
    
  
  } //end of if (SetUpKDUMP_SAVE_TARGET(Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]:nil))

  if (Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"]:nil != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Custom kdump kernel: %1"), Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"]:nil));
  } 

   if (Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump command line: %1"), Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil));
  }   

  if (Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump command line append: %1"), Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil));

  }

  CommandLine::Print("");
  //TRANSLATORS: CommandLine printed text
  CommandLine::Print(sformat(_("Kdump immediate reboots: %1"),(Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]:nil == "yes") ? _("ENABLED"):_("DISABLED") ));

  CommandLine::Print("");
 
  if (Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil == "0") {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("Numbers of old dumps: All dumps are saved without deleting old dumps")); 
  } else {
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Numbers of old dumps: %1"),Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));
  }

  if (Kdump::KDUMP_SETTINGS["KDUMP_SMTP_SERVER"]:"" != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump SMTP Server: %1"), Kdump::KDUMP_SETTINGS["KDUMP_SMTP_SERVER"]:nil));
  }

  if (Kdump::KDUMP_SETTINGS["KDUMP_SMTP_USER"]:"" != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump SMTP User: %1"), Kdump::KDUMP_SETTINGS["KDUMP_SMTP_USER"]:nil));
  }

  if (Kdump::KDUMP_SETTINGS["KDUMP_SMTP_PASSWORD"]:"" != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("Kdump SMTP Password: ********"));
  }

  if (Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_TO"]:"" != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump Sending Notification To: %1"), Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_TO"]:""));
  }

  if (Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_CC"]:"" != "") {
     CommandLine::Print("");
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(sformat(_("Kdump Sending Copy of Notification To: %1"), Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_CC"]:""));
  }

  CommandLine::Print("");


  return true;
}



boolean cmdKdumpStartup (map options) {
  
  if ((options["enable"]:nil!=nil) && (options["alloc_mem"]:nil!=nil)) {
     Kdump::add_crashkernel_param = true;
     Kdump::alocated_memory = tostring(options["alloc_mem"]:nil);
     //TRANSLATORS: CommandLine printed text
     if (Kdump::crashkernel_list_ranges)
        CommandLine::Print(_("Kernel option \"crashkernel\" includes ranges. They will be rewritten."));
     CommandLine::Print(_("To apply changes a reboot is necessary."));
     return true;

  } else if (options["disable"]:nil!=nil) {
     Kdump::add_crashkernel_param = false;
     //TRANSLATORS: CommandLine printed text
     CommandLine::Print(_("To apply changes a reboot is necessary."));
     return true;

  } else {
     // TRANSLATORS: CommandLine error message      
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpDumpLevel (map options) {
  if (options["dump_level"]:nil!=nil) {

     if ((options["dump_level"]:nil < 32) && (options["dump_level"]:nil >-1)) {
        Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"] = tostring(options["dump_level"]:nil);
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(_("Dump level was set."));     
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of option."));
        return false;
     }
  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}

boolean cmdKdumpDumpFormat (map options) {
  if (options["dump_format"]:nil!=nil) {

     if ((options["dump_format"]:nil == "ELF") ||
         (options["dump_format"]:nil == "compressed") ||
         (options["dump_format"]:nil == "lzo")) {
        Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = tostring(options["dump_format"]:nil);
        //TRANSLATORS: CommandLine printed text
        CommandLine::Print(_("Dump format was set."));     
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of option."));
        //TRANSLATORS: CommandLine printed text help
        CommandLine::Print(_("Option can include only \"ELF\", \"compressed\" or \"lzo\" value."));
        return false;
     }
  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }


}

string cmdParsePassPath (string path_file) {
  string password = nil;
  if (FileUtils::IsFile(path_file)) {
     password = (string)SCR::Read(.target.string, path_file);  
  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(sformat(_("File %1 does not exist."),path_file));
  }
  return password;
}

boolean cmdKdumpDumpTarget (map options) {
  if (options["target"]:nil!=nil) {
     string target = tostring(options["target"]:nil);
     switch(target) {

       case("file"):
         KDUMP_SAVE_TARGET["target"] = "file";
         if (options["dir"]:nil!=nil) {
            KDUMP_SAVE_TARGET["dir"] = tostring(options["dir"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"dir\" missing."));
            return false;
         }
         break;

       case("ftp"):
         KDUMP_SAVE_TARGET["target"] = "ftp";

         if (options["server"]:nil!=nil) {
            KDUMP_SAVE_TARGET["server"] = tostring(options["server"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"server\" missing."));
            return false;
         }
         
         if (options["port"]:nil!=nil)
            KDUMP_SAVE_TARGET["port"] = tostring(options["port"]:nil);

         if (options["dir"]:nil!=nil) {
            KDUMP_SAVE_TARGET["dir"] = tostring(options["dir"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"dir\" missing."));
            return false;
         }

         if (options["user"]:nil!=nil)
            KDUMP_SAVE_TARGET["user_name"] = tostring(options["user"]:nil);

         if (options["pass"]:nil!=nil) {
            string password = cmdParsePassPath(tostring(options["pass"]:nil));
            if ((password == nil) || (password == ""))
               return false;
            KDUMP_SAVE_TARGET["password"] = password;
         }
         break;

       case("ssh"):
         KDUMP_SAVE_TARGET["target"] = "ssh";

         if (options["server"]:nil!=nil) {
            KDUMP_SAVE_TARGET["server"] = tostring(options["server"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"server\" missing."));
            return false;
         }
         
         if (options["port"]:nil!=nil)
            KDUMP_SAVE_TARGET["port"] = tostring(options["port"]:nil);

         if (options["dir"]:nil!=nil) {
            KDUMP_SAVE_TARGET["dir"] = tostring(options["dir"]:nil);
         } else {
            CommandLine::Error(_("Value for \"dir\" missing."));
            return false;
         }

         if (options["user"]:nil!=nil)
            KDUMP_SAVE_TARGET["user_name"] = tostring(options["user"]:nil);

         break;

       case("nfs"):

         KDUMP_SAVE_TARGET["target"] = "nfs";

         if (options["server"]:nil!=nil) {
            KDUMP_SAVE_TARGET["server"] = tostring(options["server"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"server\" missing."));
            return false;
         }
  
         if (options["dir"]:nil!=nil) {
            KDUMP_SAVE_TARGET["dir"] = tostring(options["dir"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"dir\" missing."));
            return false;
         }

         break;

       case("cifs"):
         KDUMP_SAVE_TARGET["target"] = "cifs";

         if (options["server"]:nil!=nil) {
            KDUMP_SAVE_TARGET["server"] = tostring(options["server"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"server\" missing."));
            return false;
         }
 
         if (options["share"]:nil!=nil) {
            KDUMP_SAVE_TARGET["share"] = tostring(options["share"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"share\" missing."));
            return false;
         }

        
         if (options["port"]:nil!=nil)
            KDUMP_SAVE_TARGET["port"] = tostring(options["port"]:nil);

         if (options["dir"]:nil!=nil) {
            KDUMP_SAVE_TARGET["dir"] = tostring(options["dir"]:nil);
         } else {
            // TRANSLATORS: CommandLine error message 
            CommandLine::Error(_("Value for \"dir\" missing."));
            return false;
         }

         if (options["user"]:nil!=nil)
            KDUMP_SAVE_TARGET["user_name"] = tostring(options["user"]:nil);

         if (options["pass"]:nil!=nil) {
            string password = cmdParsePassPath(tostring(options["pass"]:nil));
            if ((password == nil) || (password == ""))
               return false;
            KDUMP_SAVE_TARGET["password"] = password;
         }
         break;

       default:
         // TRANSLATORS: CommandLine error message 
         CommandLine::Error(_("Wrong value for target."));
         return false;
         break;
     }
     Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]= tostringKDUMP_SAVE_TARGET();
     fixCommandLine(KDUMP_SAVE_TARGET["target"]:nil);
     return true;
  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpCustomKernel (map options) {

  if (options["kernel"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"] = tostring(options["kernel"]:nil);
     return true;

  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpKernelCommandLine (map options) {
  if (options["command"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(options["command"]:nil);
     return true;

  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpKernelCommandLineAppend (map options) {
  if (options["command"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(options["command"]:nil);
     return true;

  } else {
     // TRANSLATORS: CommandLine error message 
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}

boolean cmdKdumpImmediateReboot (map options) {
  if (options["enable"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]="yes";
     return true;

  } else if (options["disable"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]="no";
     return true;

  } else { 
     // TRANSLATORS: CommandLine error message     
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpCopyKernel(map options) {
  if (options["enable"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_COPY_KERNEL"]="yes";
     return true;

  } else if (options["disable"]:nil!=nil) {
     Kdump::KDUMP_SETTINGS["KDUMP_COPY_KERNEL"]="no";
     return true;

  } else { 
     // TRANSLATORS: CommandLine error message     
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}


boolean cmdKdumpKeepOldDumps (map options) {
  if (options["no"]:nil!=nil) {

     if (options["no"]:nil > -1){
        Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]= tostring(options["no"]:nil);
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of options \"no\"."));
        return false;
     }

  } else {
     // TRANSLATORS: CommandLine error message  
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }

}

boolean cmdKdumpSMTPServer (map options)
{
  if (options["server"]:nil!=nil) {
     string server = tostring(options["server"]:nil);

     if ((server != "") && (server != nil)){
        Kdump::KDUMP_SETTINGS["KDUMP_SMTP_SERVER"]= server;
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of options \"server\"."));
        return false;
     }

  } else {
     // TRANSLATORS: CommandLine error message    
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }
}

boolean cmdKdumpSMTPUser (map options)
{
  if (options["user"]:nil!=nil) {
     string user = tostring(options["user"]:nil);

     if ((user != "") && (user != nil)){
        Kdump::KDUMP_SETTINGS["KDUMP_SMTP_USER"]= user;
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of options \"user\"."));
        return false;
     }

  } else {
     // TRANSLATORS: CommandLine error message    
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }
}


boolean cmdKdumpSMTPPass (map options)
{
  if (options["pass"]:nil!=nil) {
     string password = cmdParsePassPath(tostring(options["pass"]:nil));
     if ((password == nil) || (password == ""))
        return false;
     Kdump::KDUMP_SETTINGS["KDUMP_SMTP_PASSWORD"] = password;
  } else {
     // TRANSLATORS: CommandLine error message    
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }
}


boolean cmdKdumpSMTPNotifTo (map options)
{
  if (options["email"]:nil!=nil) {
     string email = tostring(options["email"]:nil);

     if ((email != "") && (email != nil)){
        Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_TO"]= email;
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of options \"email\"."));
        return false;
     }

  } else {
     // TRANSLATORS: CommandLine error message    
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }
}

boolean cmdKdumpSMTPNotifCC (map options)
{
  if (options["email"]:nil!=nil) {
     string email = tostring(options["email"]:nil);

     if ((email != "") && (email != nil)){
        Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_CC"]= email;
        return true;
     } else {
        // TRANSLATORS: CommandLine error message 
        CommandLine::Error(_("Wrong value of options \"email\"."));
        return false;
     }

  } else {
     // TRANSLATORS: CommandLine error message    
     CommandLine::Error(_("Wrong options were used."));
     return false;
  }
}

map cmdline_description = $[
    "id" 	: "kdump",
    /* Command line help text for the kdump module */
    "help"	: _("Configuration of kdump"),
    "guihandler"        : KdumpSequence,
    "initialize"        : Kdump::Read,
    "finish"            : Kdump::Write,
    "actions"           : $[

	"show"    : $[
	"handler" : cmdKdumpShow,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Display settings"),
	"example" : [
		   "show",
	            ],
	],

        "startup" : $[
	"handler" : cmdKdumpStartup,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Start-up settings"),
	"example" : [
		   "startup enable alloc_mem=256",
		   "startup disable",
	            ],
        ],

        "dumplevel" : $[
	"handler" : cmdKdumpDumpLevel,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Dump Level number 0-31"),
	"example" : [
		   "dumplevel dump_level=24",
	            ],
        ],


        "dumpformat" : $[
	"handler" : cmdKdumpDumpFormat,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Dump format for dump image ELF/compressed/lzo"),
	"example" : [
		   "dumpformat dump_format=ELF",
		   "dumpformat dump_format=compressed",
		   "dumpformat dump_format=ĺzo",
	            ],
        ],

        "dumptarget" : $[
	"handler" : cmdKdumpDumpTarget,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Dump target includes destination for saving dump images"),
	"example" : [
		   "dumptarget taget=file dir=/var/log/dump",
		   "dumptarget taget=ftp server=name_server port=21 dir=/var/log/dump user=user_name pass=path_to_file_with_password",
                   "dumptarget taget=ssh server=name_server port=22 dir=/var/log/dump user=user_name",
		   "dumptarget taget=nfs server=name_server dir=/var/log/dump",
		   "dumptarget taget=cifs server=name_server share=share_name dir=/var/log/dump user=user_name pass=path_to_file_with_password",
	            ],
        ],

        "customkernel" : $[
	"handler" : cmdKdumpCustomKernel,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("The naming scheme is:/boot/vmlinu[zx]-<kernel_string>[.gz] Please enter only \"kernel_string\"."),
	"example" : [
		   "customkernel kernel=kdump",
	            ],
        ],
   
        "kernelcommandline" : $[
	"handler" : cmdKdumpKernelCommandLine,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("The kdump commandline is the command line that needs to be passed off to the kdump kernel."),
	"example" : [
		   "kernelcommandline command=\"ro root=LABEL=/\"",
	            ],
        ],

        "kernelcommandlineappend" : $[
	"handler" : cmdKdumpKernelCommandLineAppend,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Set this variable if you only want to _append_ values to the default command line string."),
	"example" : [
		   "kernelcommandlineapped command=\"ro root=LABEL=/\"",
	            ],
        ],

        "immediatereboot" : $[
	"handler" : cmdKdumpImmediateReboot,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Immediately reboot after saving the core in the kdump kernel."),
	"example" : [
		   "immediatereboot enable",
		   "immediatereboot disable",
	            ],
        ],

        "copykernel" : $[
	"handler" : cmdKdumpCopyKernel,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Copy kernel into dump directory."),
	"example" : [
		   "copykernel enable",
		   "copykernel disable",
	            ],
        ],

       "keepolddumps" : $[
	"handler" : cmdKdumpKeepOldDumps,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Specifies how many old dumps are kept. 0 means keep all."),
	"example" : [
		   "keepolddumps no=5",
	            ],
        ],

	"smtpserver": $[
	"handler" : cmdKdumpSMTPServer,
	// TRANSLATORS: CommandLine help
	"help" : _("SMTP Server for sending notification messages."),
	"example" : [
		   "smtpserver server=smtp.server.com",
	            ],
	],

	"smtpuser": $[
	"handler" : cmdKdumpSMTPUser,
	// TRANSLATORS: CommandLine help
	"help" : _("SMTP Username for sending notification messages."),
	"example" : [
		   "smtpuser user=foo_user",
	            ],
	],

	"smtppass": $[
	"handler" : cmdKdumpSMTPPass,
	// TRANSLATORS: CommandLine help
	"help" : _("SMTP Password for sending notification messages. Path of file which includes password (plain text file)"),
	"example" : [
		   "smtppass pass=/path/to/file",
	            ],
	],

	"notificationto": $[
	"handler" : cmdKdumpSMTPNotifTo,
	// TRANSLATORS: CommandLine help
	"help" : _("Email address for sending notification messages"),
	"example" : [
		   "notificationto email=foo@bar.com",
		   "notificationto email=\"foo1@bar.com foo2@bar.com\"",
	            ],
	],

	"notificationcc": $[
	"handler" : cmdKdumpSMTPNotifCC,
	// TRANSLATORS: CommandLine help
	"help" : _("Email address for sending copy of notification messages"),
	"example" : [
		   "notificationcc email=foo@bar.com",
		   "notificationcc email=\"foo1@bar.com foo2@bar.com\"",
	            ],
	],


    ],
    "options"		: $[
        "enable": $[
		// TRANSLATORS: CommandLine help
		"help" : _("Enable option"),
	],

	"disable": $[
		// TRANSLATORS: CommandLine help
		"help" : _("Disable option"),
	],

	"alloc_mem": $[
		"type" : "integer",
		// TRANSLATORS: CommandLine help
		"help" : _("Size of allocated memory MB"),
	],
        
	"dump_level": $[
		"type" : "integer",
		// TRANSLATORS: CommandLine help
		"help" : _("Number for dump level includes pages for saving"),
	],

	"dump_format": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Dump format can be ELF, compressed or lzo"),
	],

	"target": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Dump target includes type of target from: file (local filesystem), ftp, ssh, nfs, cifs"),
	],

	"server": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Name of server"),
	],

        "port": $[
		"type" : "integer",
		// TRANSLATORS: CommandLine help
		"help" : _("Port for connection"),
	],

	"dir": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Directory for saving dump images"),
	],

	"share": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Exported share"),
	],

	"user": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("User name"),
	],

	"pass": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Path of file which includes password (plain text file)"),
	],

	"raw": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("udev_id of raw partition"),
	],

	"kernel": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("The naming scheme is: /boot/vmlinu[zx]-<kernel_string>[.gz] kernel means only \"kernel_string\"."),
	],

	"command": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Include command line options."),
	],


	"level": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Option means runlevel to boot the kdump kernel. Only values such as 1,2,3,5 or s are allowed"),
	],

	"no": $[
		"type" : "integer",
		// TRANSLATORS: CommandLine help
		"help" : _("Number of dumps. 0 means keep all."),
	],

	"email": $[
		"type" : "string",
		// TRANSLATORS: CommandLine help
		"help" : _("Email address"),
	],

	
    ],
    "mappings"		: $[
	"show" : [
	],

        "startup" : [
		"enable", "disable", "alloc_mem",
	],

        "dumplevel" : [
		"dump_level",
	],

        "dumpformat" : [
		"dump_format",
	],

        "dumptarget": [
		"target", "server", "port", "share", "dir", "user", "pass",
	],

        "customkernel": [
		"kernel",
	],

        "kernelcommandline": [
		"command",
	],

        "kernelcommandlineappend": [
		"command",
	],

        "immediatereboot": [
		"enable", "disable",
	],

        "keepolddumps": [
		"no",
	],

        "smtpserver": [
		"server",
	],

        "smtpuser": [
		"user",
	],

        "smtppass": [
		"pass",
	],

        "notificationto": [
		"email",
	],

        "notificationcc": [
		"email",
	],



    ]
];

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
}

/* main ui function */
any ret = nil;

if (propose) {
   //ret = KdumpAutoSequence();
   Popup::Error("AutoYaST is not supported");
   ret = `abort;
}
else ret = CommandLine::Run(cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("Kdump module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
