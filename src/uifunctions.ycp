/**
 * File:	include/kdump/dialogs.ycp
 * Package:	Configuration of kdump
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.com>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "kdump";

import "Popup";
import "Kdump";
import "Service";
import "Package";
import "PackageSystem";
import "Mode";

    // EXAMPLE FUNCTIONS
/*
 *    void ExampleInit(string key) {
 *	y2milestone("Example Init");
 *    }
 *
 *    symbol ExampleHandle(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Handle");
 *	return nil;
 *    }
 *
 *    void ExampleStore(string key, map event) {
 *	any ret = event["ID"]:nil;
 *	y2milestone("Example Store");
 *    }
 *
 */


boolean set_network = false;

boolean set_kdump_append = false;

/**
 * map of values for "KDUMP_SAVEDIR"
 *  
 * local map <string, string >
 */
map <string, string > KDUMP_SAVE_TARGET = $[
   "target"		: "file", // ftp, ssh, nfs, cifs
   "server"		: "",
   "dir"		: "",
   "user_name"		: "", // empty means anonymous
   "port"		: "", // deafults ftp: 21 ssh:22
   "share"		: "",
   "password"		: "", 
];

void StoreTargetKdumpHandle(string type);

string type ="local_filesystem";

/**
 * definition UI terms for saveing dump target
 *  
 * terms
 */

term local_filesystem = `VBox(
  `Frame(_("Local Filesystem"),`HBox(`HSpacing(1),`VBox(
    `Left(`HBox(
      `InputField(`id("dir"), _("&Directory for Saving Dumps")),
      `VBox ( `Label(""),
      `PushButton ( `id ("select_dir"), `opt ( `hstretch ),  _("B&rowse"))
    )))
    
  )))
);


term ftp = `VBox(
  `Frame(_("FTP"),`HBox(`HSpacing(1),`VBox(
    `Left(`HBox(
      `Left(`InputField(`id ("server"), _("Server Nam&e"))),
      `HSpacing(1),
      `Left(`IntField(`id ("port"), _("P&ort"), 0,65536,21)),
      `HStretch ()
    )),
    // text entry
    `Left(`InputField( `id("dir"), _("&Directory on Server"))),
    `Left(`CheckBox(`id ("anonymous"), `opt (`notify),_("Enable Anon&ymous FTP"))),
    
    `Left(`HBox(
       // text entry
      `Left(`InputField(`id ("user_name"), _("&User Name"))),
      `HSpacing(1),
      // password entry
      `Left(`Password(`id ("password"), _("&Password")))
     ))    
  )))

);

term ssh = `VBox(
  `Frame(_("SSH (scp)"),`HBox(`HSpacing(1),`VBox(
    `Left(`HBox(
      `Left(`InputField(`id ("server"), _("Server Nam&e"))),
      `HSpacing(1),
      `Left(`IntField(`id ("port"), _("P&ort"), 0,65536,22)),
      `HStretch ()
    )),    
    `Left(`InputField( `id("dir"), _("&Directory on Server"))),
    // text entry
    `Left(`HBox(
       // text entry
      `Left(`InputField(`id ("user_name"), _("&User Name"))),
      `HSpacing(1),
      // password entry
      `Left(`Password(`id ("password"), _("&Password")))
     ))
  )))

);

term nfs = `VBox(
  `Frame(_("NFS"),`HBox(`HSpacing(1),`VBox(
    `Left(`InputField(`id ("server"), _("Server Nam&e"))),
     // text entry
    `Left(`InputField( `id("dir"), _("&Directory on Server")))  
  )))

);


term cifs = `VBox(
  `Frame(_("CIFS (SMB)"),`HBox(`HSpacing(1),`VBox(
    `Left(`InputField(`id ("server"), _("Server Nam&e"))),
    `Left(`HBox(
      // text entries
      `Left(`InputField(`id ("share"), _("Exported Sha&re"))),
      `HSpacing(1),
      `Left(`InputField( `id("dir"), _("&Directory on Server")))
     )),
    `Left(`CheckBox(`id ("anonymous"), `opt (`notify),_("Use Aut&hentication"), true)),
    `Left(`HBox(
       // text entry
      `Left(`InputField(`id ("user_name"), _("&User Name"))),
      `HSpacing(1),
      // password entry
      `Left(`Password(`id ("password"), _("&Password")))
    ))
  )))

);

/**
  * Function initializes option "Enable/Disable kdump"
  */
void InitEnableDisalbeKdump (string key) {

  if (Mode::installation())
  {
      if (Kdump::add_crashkernel_param)
         UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"enable_kdump");
      else 
         UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"disable_kdump");

  } else {
      if ((Kdump::add_crashkernel_param) && (Service::Status("boot.kdump") == 0 ))
         UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"enable_kdump");
      else 
         UI::ChangeWidget(`id("EnableDisalbeKdump"),`Value,"disable_kdump");
  }
  
}

/**
  * Function stores option "Enable/Disable kdump"
  * 
  */
void StoreEnableDisalbeKdump (string key, map event) {
  string radiobut = (string) UI::QueryWidget(`id("EnableDisalbeKdump"), `Value);
  if (radiobut == "enable_kdump") {
     Kdump::add_crashkernel_param = true;
  } else {
     Kdump::add_crashkernel_param = false; 
  }
}

/**
  * Function for handling map values
  * 
  * local map <string, string > KDUMP_SAVE_TARGET
  */

boolean SetUpKDUMP_SAVE_TARGET(string target) {
 
 string parse_target = target;

 if (target != "") {
   integer pos = search(parse_target, "/");
   integer pos1 = -1;
   KDUMP_SAVE_TARGET["target"]=substring(parse_target,0,pos-1);
   parse_target = substring(parse_target,pos+2);

   // file 
   if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
      KDUMP_SAVE_TARGET["dir"]=parse_target;
   
   // nfs
   } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
      pos = search(parse_target, "/");
      //pos1 = pos; 
      KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
      //pos = find(parse_target, "/");
      //KDUMP_SAVE_TARGET["share"]=substring(parse_target,pos1+1,pos-(pos1+1));
      KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);

   } else if ((KDUMP_SAVE_TARGET["target"]:nil == "ftp") 
             || (KDUMP_SAVE_TARGET["target"]:nil == "cifs")
	     || (KDUMP_SAVE_TARGET["target"]:nil == "ssh")) {

      pos = search(parse_target, "@");      

      if (pos != nil) {
         string user_pas = substring(parse_target,0,pos);
         pos1 = search(user_pas, ":");

         if (pos1 != nil) {
            KDUMP_SAVE_TARGET["user_name"]=substring(user_pas,0,pos1);
            KDUMP_SAVE_TARGET["password"]=substring(user_pas,pos1+1,pos);

         } else {
            KDUMP_SAVE_TARGET["user_name"]=substring(user_pas,0,pos);
         }
         parse_target = substring(parse_target,pos+1);
      }
      // only ftp & ssh
      if ((KDUMP_SAVE_TARGET["target"]:nil == "ftp")
	 || (KDUMP_SAVE_TARGET["target"]:nil == "ssh")) {
         pos1 = search(parse_target, ":");
         pos = search(parse_target, "/");

         if (pos1 != nil) {
            KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos1);
            KDUMP_SAVE_TARGET["port"]=substring(parse_target,pos1+1,pos-(pos1+1));

         } else {
            KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
         }
         KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);         
      
      // only cifs
      } else {
         pos = search(parse_target, "/"); 
         KDUMP_SAVE_TARGET["server"]=substring(parse_target,0,pos);
         parse_target = substring(parse_target,pos+1);
         pos = search(parse_target, "/");
         KDUMP_SAVE_TARGET["share"]=substring(parse_target,0,pos);
         KDUMP_SAVE_TARGET["dir"]=substring(parse_target,pos);
      }

   }
 map <string, string > debug_KDUMP_SAVE_TARGET = KDUMP_SAVE_TARGET;

 if (debug_KDUMP_SAVE_TARGET["password"]:"" != "")
    debug_KDUMP_SAVE_TARGET["password"] = "**********";

 y2milestone("--------------KDUMP_SAVE_TARGET---------------");
 y2milestone("%1",debug_KDUMP_SAVE_TARGET);
 y2milestone("--------------KDUMP_SAVE_TARGET---------------");

   return true;
 } else {
   return false;
 }

}



/**
  * Function for saving KDUMP_SAVE_TARGET
  * to standard outpu for KDUMP_SAVEDIR
  *
  * e.g. KDUMP_SAVEDIR = "ftp://[user[:pass]]@host[:port]/path 
  */

string tostringKDUMP_SAVE_TARGET() {
  string result = "";

  // file
  if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
     result = "file://";

     if (KDUMP_SAVE_TARGET["dir"]:nil != "")
        result = result+KDUMP_SAVE_TARGET["dir"]:nil;

  // ftp
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ftp") {
     result = "ftp://";

     if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        result = result+KDUMP_SAVE_TARGET["server"]:nil;
        // add port if it is set...
        if (KDUMP_SAVE_TARGET["port"]:nil != "") {
           result = result+":"+KDUMP_SAVE_TARGET["port"]:nil+KDUMP_SAVE_TARGET["dir"]:nil; 

        } else {
           result = result+KDUMP_SAVE_TARGET["dir"]:nil;
        }

     } else {
        result = result+KDUMP_SAVE_TARGET["user_name"]:nil;

        if (KDUMP_SAVE_TARGET["password"]:nil != "")
           result = result+":"+KDUMP_SAVE_TARGET["password"]:nil;
        result = result+"@"+KDUMP_SAVE_TARGET["server"]:nil;

        if (KDUMP_SAVE_TARGET["port"]:nil != "") {
           result = result+":"+KDUMP_SAVE_TARGET["port"]:nil+KDUMP_SAVE_TARGET["dir"]:nil; 

        } else {
           result = result+KDUMP_SAVE_TARGET["dir"]:nil;
        }
     }
 
  // ssh
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ssh") {
     result = "ssh://";

     if ((KDUMP_SAVE_TARGET["user_name"]:nil != "") && (KDUMP_SAVE_TARGET["password"]:nil == "")) {
        result = result+KDUMP_SAVE_TARGET["user_name"]:nil+"@";
     } else if ((KDUMP_SAVE_TARGET["user_name"]:nil != "") && (KDUMP_SAVE_TARGET["password"]:nil != "")) {
	result = result+KDUMP_SAVE_TARGET["user_name"]:nil;
	result = result+":"+KDUMP_SAVE_TARGET["password"]:nil +"@";	
     }
     result = result+KDUMP_SAVE_TARGET["server"]:nil;
     // add port if it is set...
     if (KDUMP_SAVE_TARGET["port"]:nil != "") {
        result = result+":"+KDUMP_SAVE_TARGET["port"]:nil+KDUMP_SAVE_TARGET["dir"]:nil; 

     } else {
        result = result+KDUMP_SAVE_TARGET["dir"]:nil;
     }


  // nfs
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
     result = "nfs://"+KDUMP_SAVE_TARGET["server"]:nil+KDUMP_SAVE_TARGET["dir"]:nil;
  
  // cifs 
  } else if (KDUMP_SAVE_TARGET["target"]:nil == "cifs") {
     result = "cifs://";

     if (findfirstof(KDUMP_SAVE_TARGET["dir"]:"", "/") != 0 )
	KDUMP_SAVE_TARGET["dir"]="/"+KDUMP_SAVE_TARGET["dir"]:"";

     if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        result = result+KDUMP_SAVE_TARGET["server"]:nil+"/"+KDUMP_SAVE_TARGET["share"]:nil+KDUMP_SAVE_TARGET["dir"]:nil;
     } else {
        result = result+KDUMP_SAVE_TARGET["user_name"]:nil;

        if (KDUMP_SAVE_TARGET["password"]:nil != "")
           result = result + ":" + KDUMP_SAVE_TARGET["password"]:nil;
	
        result = result + "@"+ KDUMP_SAVE_TARGET["server"]:nil+"/"+KDUMP_SAVE_TARGET["share"]:nil+KDUMP_SAVE_TARGET["dir"]:nil;
	    

     }
  }
 
  //Popup::Message(result);

  //y2milestone("-----------------KDUMP_SAVEDIR--------------------");
  //y2milestone("%1",result);
  //y2milestone("-----------------KDUMP_SAVEDIR--------------------");

  return result;
}




/**
  * Function initializes option "Save Traget for Kdump Images"
  * 
  */

void InitTargetKdump (string key) {

  SetUpKDUMP_SAVE_TARGET(Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"]:nil);

  if (KDUMP_SAVE_TARGET["target"]:nil == "file") {
     //UI::ChangeWidget(`id ("local_filesystem"), `Value, true);
     UI::ChangeWidget(`id ("TargetKdump"), `Value, "local_filesystem");
     UI::ReplaceWidget (`id ("Targets"), local_filesystem);          
     UI::ChangeWidget(`id ("dir"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);

  } else if (KDUMP_SAVE_TARGET["target"]:nil == "nfs") {
     UI::ReplaceWidget (`id ("Targets"), nfs);
     //UI::ChangeWidget(`id ("nfs"), `Value, true);
     UI::ChangeWidget(`id ("TargetKdump"), `Value, "nfs");
     UI::ChangeWidget(`id ("server"), `Value, KDUMP_SAVE_TARGET["server"]:nil);
     UI::ChangeWidget(`id ("dir"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);

  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ssh") {

     UI::ReplaceWidget (`id ("Targets"), ssh);
     //UI::ChangeWidget(`id ("ssh"), `Value, true);
     UI::ChangeWidget(`id ("TargetKdump"), `Value, "ssh");
     if (KDUMP_SAVE_TARGET["port"]:nil != "")
        UI::ChangeWidget(`id ("port"), `Value, tointeger(KDUMP_SAVE_TARGET["port"]:nil));
     foreach (string key, ["server",  "user_name", "dir", "password"], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

  } else if (KDUMP_SAVE_TARGET["target"]:nil == "ftp") {
     UI::ReplaceWidget (`id ("Targets"), ftp);
     //UI::ChangeWidget(`id ("ftp"), `Value, true);
     UI::ChangeWidget(`id ("TargetKdump"), `Value, "ftp");
     if (KDUMP_SAVE_TARGET["port"]:nil != "")
        UI::ChangeWidget(`id ("port"), `Value, tointeger(KDUMP_SAVE_TARGET["port"]:nil));
     foreach (string key, ["server", "dir" ], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

      if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        UI::ChangeWidget(`id ("anonymous"), `Value, true);
     } else {
       UI::ChangeWidget(`id ("user_name"), `Value, KDUMP_SAVE_TARGET["user_name"]:nil);     
       UI::ChangeWidget(`id ("password"), `Value, KDUMP_SAVE_TARGET["password"]:nil);
     }

  } else if (KDUMP_SAVE_TARGET["target"]:nil == "cifs") {
     UI::ReplaceWidget (`id ("Targets"), cifs);
     //UI::ChangeWidget(`id ("cifs"), `Value, true);
     UI::ChangeWidget(`id ("TargetKdump"), `Value, "cifs");
     foreach (string key, ["server", "dir", "share"], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

     if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        UI::ChangeWidget(`id ("anonymous"), `Value, false);
     } else {
       UI::ChangeWidget(`id ("user_name"), `Value, KDUMP_SAVE_TARGET["user_name"]:nil);     
       UI::ChangeWidget(`id ("password"), `Value, KDUMP_SAVE_TARGET["password"]:nil);
     }
  }
}


/**
  * Function validates options in 
  * "Saving Target for Kdump Image"
  */

boolean ValidTargetKdump (string key, map event) {
  string radiobut = tostring(UI::QueryWidget(`id ("TargetKdump"), `Value));
  string value = nil;
  boolean anon = true;

  if (radiobut == "local_filesystem") {
     value = tostring(UI::QueryWidget(`id ("dir"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Directory for Saving Dumps\""));
        UI::SetFocus(`id("dir"));
        return false;
     }

  } else if (radiobut == "ftp") {
     value = tostring(UI::QueryWidget(`id ("server"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Server Name\""));
        UI::SetFocus(`id("server"));
        return false;
     }
     value = tostring(UI::QueryWidget(`id ("dir"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Directory on Server\""));
        UI::SetFocus(`id("dir"));
        return false;
     }
     anon = (boolean) UI::QueryWidget(`id ("anonymous"), `Value);

     if (!anon) {
        value = tostring(UI::QueryWidget(`id ("user_name"), `Value));

        if ((value == nil) || (value == "")) {
	   Popup::Error(_("You need to specify \"User Name\""));
           UI::SetFocus(`id("user_name"));
           return false;
        }
        
     }
  } else if ((radiobut == "ssh") || (radiobut == "nfs")) {
     value = tostring(UI::QueryWidget(`id ("server"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Server Name\""));
        UI::SetFocus(`id("server"));
        return false;
     }
     value = tostring(UI::QueryWidget(`id ("dir"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Directory on Server\""));
        UI::SetFocus(`id("dir"));
        return false;
     }

  } else if (radiobut == "cifs") {

     // fix for bnc #307307 module should check if cifs tools are installed when requested
     if (Mode::installation() ||Mode::autoinst() )
     {
	Kdump::kdump_packages = add(Kdump::kdump_packages, "cifs-mount");
	y2milestone("add cifs-mount to selected packages to installation");

     } else {
         if (!Package::Installed("cifs-mount"))
     	 {
	    y2milestone("SMB/CIFS share cannot be mounted, installing missing 'cifs-mount' package...");
	    // install cifs-mount package
	    PackageSystem::CheckAndInstallPackages(["cifs-mount"]);
         }
     }

     value = tostring(UI::QueryWidget(`id ("server"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Server Name\""));
        UI::SetFocus(`id("server"));
        return false;
     }
     value = tostring(UI::QueryWidget(`id ("dir"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Directory on Server\""));
        UI::SetFocus(`id("dir"));
        return false;
     }
     value = tostring(UI::QueryWidget(`id ("share"), `Value));

     if ((value == nil) || (value == "")) {
	Popup::Error(_("You need to specify \"Exported Share\""));
        UI::SetFocus(`id("share"));
        return false;
     }
     anon = (boolean) UI::QueryWidget(`id ("anonymous"), `Value);

     if (anon) {
        value = tostring(UI::QueryWidget(`id ("user_name"), `Value));

        if ((value == nil) || (value == "")) {
	   Popup::Error(_("You need to specify \"User Name\""));
           UI::SetFocus(`id("user_name"));
           return false;
        } //end of if ((value == nil) || (value == "")) 
     } //end of if (anon)
  } //end of } else if (radiobut == "cifs")

  return true;
}

/**
  * Function handles "Saving Target for Kdump Image"
  *
  */

symbol HandleTargetKdump (string key, map event) {

  any event_name = event["ID"]:nil;
  //StoreTargetKdump ( key, event);
  StoreTargetKdumpHandle(type);
  string radiobutton = tostring(UI::QueryWidget(`id ("TargetKdump"), `Value));
  type = radiobutton;

  if (event_name == "anonymous") {

     boolean value = (boolean) UI::QueryWidget(`id ("anonymous"), `Value);
     string target = tostring(UI::QueryWidget(`id ("TargetKdump"), `Value));

     if (((value) && (target == "ftp"))||((!value) && (target == "cifs"))) {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        //KDUMP_SAVE_TARGET["user_name"]="";
        //KDUMP_SAVE_TARGET["password"]=""; 

     } else if (((value) && (target == "cifs"))||((!value) && (target == "ftp"))) {
        UI::ChangeWidget(`id ("user_name"), `Enabled, true);     
        UI::ChangeWidget(`id ("password"), `Enabled, true);
     }

  } else if (radiobutton == "local_filesystem") {
     UI::ReplaceWidget (`id ("Targets"), local_filesystem);
     set_network = false;     
     UI::ChangeWidget(`id ("dir"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);
     if (event_name == "select_dir") {
         string dir = UI::AskForExistingDirectory("/", _("Select directory for saving dump images"));
         UI::ChangeWidget(`id ("dir"), `Value, dir);
     }

  } else if (radiobutton == "ftp") {
     UI::ReplaceWidget (`id ("Targets"), ftp);

     if (KDUMP_SAVE_TARGET["port"]:nil != "")
        UI::ChangeWidget(`id ("port"), `Value, tointeger(KDUMP_SAVE_TARGET["port"]:nil));
     foreach (string key, ["server", "dir" ], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

     if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        UI::ChangeWidget(`id ("anonymous"), `Value, true);

     } else {
       UI::ChangeWidget(`id ("user_name"), `Value, KDUMP_SAVE_TARGET["user_name"]:nil);     
       UI::ChangeWidget(`id ("password"), `Value, KDUMP_SAVE_TARGET["password"]:nil);
     }

  } else if (radiobutton == "ssh") {
     UI::ReplaceWidget (`id ("Targets"), ssh);

     if (KDUMP_SAVE_TARGET["port"]:nil != "")
        UI::ChangeWidget(`id ("port"), `Value, tointeger(KDUMP_SAVE_TARGET["port"]:nil));
     foreach (string key, ["server",  "user_name", "dir", "password" ], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

  } else if (radiobutton == "nfs") {
     UI::ReplaceWidget (`id ("Targets"), nfs);
     UI::ChangeWidget(`id ("server"), `Value, KDUMP_SAVE_TARGET["server"]:nil);
     UI::ChangeWidget(`id ("dir"), `Value, KDUMP_SAVE_TARGET["dir"]:nil);

  } else if (radiobutton == "cifs") {
     UI::ReplaceWidget (`id ("Targets"), cifs);
     foreach (string key, ["server", "dir", "share", "user_name", "password"], {
       UI::ChangeWidget(`id (key), `Value, KDUMP_SAVE_TARGET[key]:nil);
     });

     if (KDUMP_SAVE_TARGET["user_name"]:nil == "") {
        UI::ChangeWidget(`id ("user_name"), `Enabled, false);     
        UI::ChangeWidget(`id ("password"), `Enabled, false);
        UI::ChangeWidget(`id ("anonymous"), `Value, false);

     } else {
       UI::ChangeWidget(`id ("user_name"), `Value, KDUMP_SAVE_TARGET["user_name"]:nil);     
       UI::ChangeWidget(`id ("password"), `Value, KDUMP_SAVE_TARGET["password"]:nil);
     }

  }
  return nil;

}

boolean fixCommandLine (string target) {
    if (!Arch::s390 ())
 	return false;

    y2milestone("fixing commandline append for s390");
    string allowed = nil;
    if (target == "file") {
	// allow disks
	allowed = "3990|2105|3880|9343|6310|2107|1731/03";
    }
    else {
	// allow network devices
	allowed = "1731/0[15]|3088";
    }

    string cmd = sformat ("lscss | egrep \"(%1|3215)\" |cut -d\" \" -f1|sed s/^/\\!/|tr \"\n\" ,|sed s/,$//", allowed);
    map cmd_out = (map) SCR::Execute (.target.bash_output, cmd);
    Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = sformat("cio_ignore=all,%1", cmd_out["stdout"]:nil);
    return true;
}

void StoreTargetKdumpHandle(string type)
{
  string radiobut = type;
  string value = nil;

  if (radiobut == "local_filesystem") {
     KDUMP_SAVE_TARGET["target"] = "file";
     //directory
     value = tostring(UI::QueryWidget(`id ("dir"), `Value));

     if (value != nil)
        KDUMP_SAVE_TARGET["dir"] = value;
     else
        KDUMP_SAVE_TARGET["dir"] = "";

  } else if (radiobut == "ftp") {
    KDUMP_SAVE_TARGET["target"] = "ftp";

    //server
    value = tostring(UI::QueryWidget(`id ("server"), `Value));
    if (value != nil)
        KDUMP_SAVE_TARGET["server"] = value;
     else
        KDUMP_SAVE_TARGET["server"] = "";

    //port
    if (tostring(UI::QueryWidget(`id ("port"), `Value)) != "21")
       KDUMP_SAVE_TARGET["port"] = tostring(UI::QueryWidget(`id ("port"), `Value));
    else
       KDUMP_SAVE_TARGET["port"] = "";

    //directory
    value = tostring(UI::QueryWidget(`id ("dir"), `Value));
    if (value != nil)
       KDUMP_SAVE_TARGET["dir"] = value;
    else
       KDUMP_SAVE_TARGET["dir"] = "";

    //user_name vs. anonymous
    value = tostring(UI::QueryWidget(`id ("user_name"), `Value));


    if ((boolean) UI::QueryWidget(`id ("anonymous"), `Value)) {
       KDUMP_SAVE_TARGET["user_name"] = "";

    } else if (value != nil)  {
       KDUMP_SAVE_TARGET["user_name"] = value;

    } else {
       KDUMP_SAVE_TARGET["user_name"] = "";
    }
    
    //password
    value = tostring(UI::QueryWidget(`id ("password"), `Value));

    if ((value != nil) && (KDUMP_SAVE_TARGET["user_name"]:nil != ""))
       KDUMP_SAVE_TARGET["password"] = value;
    else
       KDUMP_SAVE_TARGET["password"] = "";

    //directory
    if (UI::QueryWidget(`id ("dir"), `Value) != nil)
       KDUMP_SAVE_TARGET["dir"] = tostring(UI::QueryWidget(`id ("dir"), `Value));
    else
       KDUMP_SAVE_TARGET["dir"] = "";

  } else if (radiobut == "ssh") {
    KDUMP_SAVE_TARGET["target"] = "ssh";

    //server
    value = tostring(UI::QueryWidget(`id ("server"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["server"] = value;
    else
       KDUMP_SAVE_TARGET["server"] = "";

    //port
    if (tostring(UI::QueryWidget(`id ("port"), `Value)) != "22")
       KDUMP_SAVE_TARGET["port"] = tostring(UI::QueryWidget(`id ("port"), `Value));
    else
       KDUMP_SAVE_TARGET["port"] = "";

    //directory
    value = tostring(UI::QueryWidget(`id ("dir"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["dir"] = value;
    else
       KDUMP_SAVE_TARGET["dir"] = "";

   //user_name 
    value = tostring(UI::QueryWidget(`id ("user_name"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["user_name"] = value;
    else 
       KDUMP_SAVE_TARGET["user_name"] = "";

   //password
    value = tostring(UI::QueryWidget(`id ("password"), `Value));

    if ((value != nil) && (KDUMP_SAVE_TARGET["user_name"]:nil != ""))
       KDUMP_SAVE_TARGET["password"] = value;
    else
       KDUMP_SAVE_TARGET["password"] = "";

    
  } else if (radiobut == "nfs") {
    KDUMP_SAVE_TARGET["target"] = "nfs";

    //server
    value = tostring(UI::QueryWidget(`id ("server"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["server"] = value;
    else
       KDUMP_SAVE_TARGET["server"] = "";

   //directory
    value = tostring(UI::QueryWidget(`id ("dir"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["dir"] = value;
    else
       KDUMP_SAVE_TARGET["dir"] = "";

  } else if (radiobut == "cifs") {
    KDUMP_SAVE_TARGET["target"] = "cifs";

     //server
    value = tostring(UI::QueryWidget(`id ("server"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["server"] = value;
    else
       KDUMP_SAVE_TARGET["server"] = "";
    
    //share
    value = tostring(UI::QueryWidget(`id ("share"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["share"] = value;
    else
       KDUMP_SAVE_TARGET["share"] = "";

    //directory
    value = tostring(UI::QueryWidget(`id ("dir"), `Value));

    if (value != nil)
       KDUMP_SAVE_TARGET["dir"] = value;
    else
       KDUMP_SAVE_TARGET["dir"] = "";

    //user_name vs. anonymous
    value = tostring(UI::QueryWidget(`id ("user_name"), `Value));

    if (!((boolean) UI::QueryWidget(`id ("anonymous"), `Value))) {
       KDUMP_SAVE_TARGET["user_name"] = "";

    } else if (value != nil) {
       KDUMP_SAVE_TARGET["user_name"] = value;

    } else {
       KDUMP_SAVE_TARGET["user_name"] = "";
    }
    
    //password
    value = tostring(UI::QueryWidget(`id ("password"), `Value));

    if ((value != nil) && (KDUMP_SAVE_TARGET["user_name"]:nil != ""))
       KDUMP_SAVE_TARGET["password"] = value;
    else
       KDUMP_SAVE_TARGET["password"] = "";
  }
  Kdump::KDUMP_SETTINGS["KDUMP_SAVEDIR"] = tostringKDUMP_SAVE_TARGET();
  fixCommandLine(KDUMP_SAVE_TARGET["target"]:nil);
}

/**
  * Function stores option 
  * "Saving Target for kdump Image"
  */

void StoreTargetKdump (string key, map event) {
  string radiobut = tostring(UI::QueryWidget(`id ("TargetKdump"), `Value));
  type = tostring(UI::QueryWidget(`id ("TargetKdump"), `Value));
  
}



/**
  * Function initializes option "Kdump Command Line"
  * 
  */

void InitKdumpCommandLine(string key) {  
  string value = "";
  value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"]:nil;
  UI::ChangeWidget(`id("KdumpCommandLine"), `Value, ((value == nil) ? "":value));

}

/**
  * Function stores option "Kdump Command Line"
  * 
  */
void StoreKdumpCommandLine (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE"] = tostring(UI::QueryWidget(`id("KdumpCommandLine"), `Value));
}


/**
  * Function initializes option "Kdump Command Line Append"
  * 
  */

void InitKdumpCommandLineAppend(string key) {  
  string value = "";
  value = Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"]:nil;
  UI::ChangeWidget(`id("KdumpCommandLineAppend"), `Value, ((value == nil) ? "":value));

}

/**
  * Function stores option "Kdump Command Line Append"
  * 
  */
void StoreKdumpCommandLineAppend (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_COMMANDLINE_APPEND"] = tostring(UI::QueryWidget(`id("KdumpCommandLineAppend"), `Value));
}


/**
  * Function initializes option "Number of Old Dumps"
  */
void InitNumberDumps (string key) {
  UI::ChangeWidget(`id("NumberDumps"), `Value, tointeger(Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));  
}

/**
  * Function stores option "Number of Old Dumps"
  */
void StoreNumberDumps(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"] = tostring(UI::QueryWidget(`id("NumberDumps"), `Value));
}

/**
  * Function initializes option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void InitEnableReboot (string key) {
  UI::ChangeWidget(`id("EnableReboot"), `Value, ((Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"]:nil == "yes") ? true:false));  
}

/**
  * Function stores option 
  * "Enable Immediate Reboot After Saving the Core"
  */

void StoreEnableReboot(string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_IMMEDIATE_REBOOT"] = (((boolean) UI::QueryWidget(`id("EnableReboot"), `Value)) ? "yes":"no");
}


// helper list, each bit has its decimal representation
list <integer> bit_weight_row = [16, 8, 4, 2, 1];

/**
  * Function initializes option 
  * "Dump Level" - visualization in UI
  */

void SetDumpLevel (string bit_number) {
  integer counter = -1;
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     counter = counter + 1;
     string one_bit = substring (bit_number, counter, 1);
     UI::ChangeWidget(`id(key), `Value, ((one_bit == "1") ? false:true));
  });

}

/**
  * Function initializes option 
  * "Dump Level"
  */


void InitDumpLevel (string key) {
  integer value =  tointeger(Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"]:nil);
  string ret = "";
  foreach (integer try_i, bit_weight_row, {
    if ((value / try_i) > 0) {
       value = value % try_i;
       ret = ret + "1";
    } else {
       ret = ret + "0";
    }
  });
  
  //Popup::Message(ret);
  SetDumpLevel(ret);
}

/**
  * Function store option 
  * "Dump Level" - info from UI checkboxes
  * @result string binary code e.g. 11000 
  */

string GetDumpLevel () {
  string ret = "";
  foreach(string key, ["free_page", "user_data", "cache_private", "cache_page", "zero_page"],{
     if ( (boolean) UI::QueryWidget(`id(key), `Value))
        ret = ret + "0";
     else
        ret = ret + "1";
  });
  //Popup::Message(ret);
  return ret;
}


/**
  * Function validates options in 
  * "Dump Level"
  * install makedumpfile if KDUMP_DUMPLEVEL > 0
  */

boolean ValidDumpLevel (string key, map event) {
  boolean result = true;
  string value = GetDumpLevel();
  integer counter = -1;
  integer dumplevel = 0;

  while (counter < 5) {
    counter = counter + 1;
    string one_bit = substring (value, counter, 1);
    if (one_bit == "1") {
       dumplevel = dumplevel + bit_weight_row[counter]:0;
    }
  };

  if ((dumplevel > 0 ) || (dumplevel == nil)) {

     if (Mode::installation() ||Mode::autoinst() )
     {
	Kdump::kdump_packages = add(Kdump::kdump_packages, "makedumpfile");
	y2milestone("add makedumpfile to selected packages to installation");

     } else {
        if (Package::Installed("makedumpfile")) {
           return true;
        } else {
           list <string> package_list = [];
           package_list = add(package_list, "makedumpfile"); 

           if (!PackageSystem::CheckAndInstallPackages(package_list)) 
           {
              result = false;

              if (!Mode::commandline()) 
              {
                 Popup::Error(Message::CannotContinueWithoutPackagesInstalled());
              } else {
                 CommandLine::Error(Message::CannotContinueWithoutPackagesInstalled());
              }
              y2error("[kdump] (ValidDumpLevel) Installation of package list %1 failed or aborted", package_list);
           } else {
              result = true;
           }
        } //end of else for if (Package::Installed("makedumpfile"))
     } 
  } //end of if ((dumplevel >0 ) || (dumplevel == nil))
  return result;
}


/**
  * Function stores option 
  * "Dump Level"
  */
void StoreDumpLevel(string key, map event) {
  
  string value = GetDumpLevel();
  integer counter = -1;
  integer int_value = 0;
  while (counter < 5) {
    counter = counter + 1;
    string one_bit = substring (value, counter, 1);
    if (one_bit == "1") {
       int_value = int_value + bit_weight_row[counter]:0;
    }
  };

  string ret =  tostring(int_value);
  Kdump::KDUMP_SETTINGS["KDUMP_DUMPLEVEL"] = ret;
  //Popup::Message(ret);
 

}


/**
  *  Hadle function for option 
  * "Dump Level"
  */

symbol HandleDumpLevel(string key, map event) {
  any ret = event["ID"]:nil;
  if (ret == "cache_private") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_page"), `Value, true);
  }

  if (ret == "cache_page") {
     boolean value_cache_private = (boolean) UI::QueryWidget(`id("cache_private"), `Value);
     boolean value_cache_page = (boolean) UI::QueryWidget(`id("cache_page"), `Value);
     if ((value_cache_private) && (!value_cache_page))
        UI::ChangeWidget(`id("cache_private"), `Value, false);

  }
  return nil;
}

/**
  * Function initializes option 
  * "KdumpMemory"
  */


void InitKdumpMemory (string key) {
  if (Kdump::total_memory > 0) {
    UI::ChangeWidget(`id("total_memory"), `Value, tostring(Kdump::total_memory));
    UI::ChangeWidget(`id("memory_buffer"), `Value, tointeger(Kdump::alocated_memory));    
    UI::ChangeWidget(`id("usable_memory"), `Value, 
      tostring((Kdump::total_memory - (integer) UI::QueryWidget(`id("memory_buffer"), `Value))));
  } else {
    UI::ChangeWidget(`id("total_memory"), `Value, "0");
    UI::ChangeWidget(`id("usable_memory"), `Value, "0");
    UI::ChangeWidget(`id("memory_buffer"), `Enabled, false);
  }

}

/**
  *  Hadle function for option 
  * "KdumpMemory"
  */

symbol HandleKdumpMemory (string key, map event) {
  any ret = event["ID"]:nil;
  if (ret == "memory_buffer") {
     integer value = (integer) UI::QueryWidget(`id("memory_buffer"), `Value);
     if (value > Kdump::total_memory) {
        UI::ChangeWidget(`id("memory_buffer"), `Value, Kdump::total_memory);
        UI::ChangeWidget(`id("usable_memory"), `Value, "0");
     } else {
        UI::ChangeWidget(`id("usable_memory"), `Value, 
         tostring((Kdump::total_memory - (integer) UI::QueryWidget(`id("memory_buffer"), `Value))));
     }
  }

}


/**
  * Function validates if crashkernel option includes 
  * several ranges and ask user about rewritting 
  *
  *"KdumpMemory"
  */

boolean ValidKdumpMemory (string key, map event) 
{
  if (Kdump::crashkernel_list_ranges && Mode::normal())
  { 
     Kdump::crashkernel_list_ranges = !Popup::YesNo( 
         _("Kernel option includes several ranges. Rewrite it?"));
  }
     
  return true;
}
/**
  *  Store function for option 
  * "KdumpMemory"
  */

void StoreKdumpMemory (string key, map event) {
  Kdump::alocated_memory = tostring(UI::QueryWidget(`id("memory_buffer"), `Value));

}


/**
  * Function initializes option 
  * "Custom kdump Kernel"
  */


void InitInitrdKernel (string key) {
  UI::ChangeWidget(`id("InitrdKernel"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"]:nil);
}



/**
  * Function stores option 
  * "Custom kdump Kernel"
  */
void StoreInitrdKernel (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_KERNELVER"] = tostring(UI::QueryWidget(`id("InitrdKernel"), `Value));
}


/**
  * Function initializes option 
  * "Dump Format"
  */

void InitDumpFormat (string key) {
  if (Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"]:nil == "ELF")
     UI::ChangeWidget(`id("DumpFormat"), `Value, "elf_format");
  else if (Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"]:nil == "lzo")
     UI::ChangeWidget(`id("DumpFormat"), `Value, "lzo_format");
  else
     UI::ChangeWidget(`id("DumpFormat"), `Value, "compressed_format");
}


/**
  * Function validates options in 
  * "Dump Format"
  * install makedumpfile if KDUMP_DUMPFORMAT == "compressed"
  *                      or KDUMP_DUMPFORMAT == "lzo"
  */

boolean ValidDumpFormat (string key, map event) {
  boolean result = true;
  string value = tostring(UI::QueryWidget(`id("DumpFormat"), `Value));

  if ((value != "elf_format") || (value == nil)) {

     if (Mode::installation() || Mode::autoinst() )
     {
	Kdump::kdump_packages = add(Kdump::kdump_packages, "makedumpfile");
	y2milestone("add makedumpfile to selected packages to installation");

     } else {
        if (Package::Installed("makedumpfile")) {
           return true;
        } else {
           list <string> package_list = [];
           package_list = add(package_list, "makedumpfile"); 

           if (!PackageSystem::CheckAndInstallPackages(package_list)) 
           {
              result = false;

              if (!Mode::commandline()) 
              {
                 Popup::Error(Message::CannotContinueWithoutPackagesInstalled());
              } else {
                 CommandLine::Error(Message::CannotContinueWithoutPackagesInstalled());
              }
              y2error("[kdump] (ValidDumpFormat) Installation of package list %1 failed or aborted", package_list);
           } else {
              result = true;
           }
        } //end of else for if (Package::Installed("makedumpfile"))
     } 
  } //end of if ((value != "elf_format") || (value == nil))
  return result;
}

/**
  * Function stores option 
  * "Dump Format"
  */

void StoreDumpFormat (string key, map event) {
  string value = tostring(UI::QueryWidget(`id("DumpFormat"), `Value));
  if (value == "elf_format")
     Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = "ELF";
  else if (value == "lzo_format")
     Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = "lzo";
  else
     Kdump::KDUMP_SETTINGS["KDUMP_DUMPFORMAT"] = "compressed";
}

/**
  * Function initializes option 
  * "Enable Delete Old Dump Images"
  */

void InitEnableDeleteImages (string key) {
  UI::ChangeWidget(`id("EnableDeleteImages"), `Notify, true);
  if (Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil != "0") {
     UI::ChangeWidget(`id("NumberDumps"), `Enabled, true);
     UI::ChangeWidget(`id("EnableDeleteImages"), `Value, true);
  } else {
     UI::ChangeWidget(`id("EnableDeleteImages"), `Value, false);
     UI::ChangeWidget(`id("NumberDumps"), `Enabled, false); 
  }
}

/**
  *  Hadle function for option 
  * "Enable Delete Old Dump Images"
  */

symbol HandleEnableDeleteImages (string key, map event) {

  any ret = event["ID"]:nil;
  if (ret == "EnableDeleteImages") {
     boolean value = (boolean) UI::QueryWidget(`id("EnableDeleteImages"), `Value);
     if (!value) {
        UI::ChangeWidget(`id("NumberDumps"), `Value, tointeger("0"));
        UI::ChangeWidget(`id("NumberDumps"), `Enabled, false);	
     } else {
        UI::ChangeWidget(`id("NumberDumps"), `Value, 
            tointeger(Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"]:nil));
        UI::ChangeWidget(`id("NumberDumps"), `Enabled, true);	

     }
  }
}


/**
  * Function stores option 
  * "Enable Delete Old Dump Images"
  */

void StoreEnableDeleteImages (string key, map event) {
  boolean value = (boolean) UI::QueryWidget(`id("EnableDeleteImages"), `Value);
  if (!value) {
     Kdump::KDUMP_SETTINGS["KDUMP_KEEP_OLD_DUMPS"] = "0";
  } 
}


/**
  * Function initializes option 
  * "Enable Copy Kernel into the Dump Directory"
  */

void InitEnableCopyKernel (string key) {
  if (Kdump::KDUMP_SETTINGS["KDUMP_COPY_KERNEL"]:"no" == "yes") {
     UI::ChangeWidget(`id("EnableCopyKernel"), `Value, true);
  } else {
     UI::ChangeWidget(`id("EnableCopyKernel"), `Value, false);
  }
}



/**
  * Function stores option 
  * "Enable Copy Kernel into the Dump Directory"
  */

void StoreEnableCopyKernel (string key, map event) {
  boolean value = (boolean) UI::QueryWidget(`id("EnableCopyKernel"), `Value);
  if (!value) {
     Kdump::KDUMP_SETTINGS["KDUMP_COPY_KERNEL"] = "no";
  } else {
     Kdump::KDUMP_SETTINGS["KDUMP_COPY_KERNEL"] = "yes";
  }
}


/**
  * Function initializes option 
  * "SMTP Server"
  */
void InitSMTPServer (string key) {
  UI::ChangeWidget(`id("SMTPServer"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_SMTP_SERVER"]:"");
}

/**
  * Function stores option 
  * "SMTP Server"
  */
void StoreSMTPServer (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_SMTP_SERVER"] = tostring(UI::QueryWidget(`id("SMTPServer"), `Value));
}

/**
  * Function initializes option 
  * "User Name" (SMTP Settings)
  */
void InitSMTPUser (string key) {
  UI::ChangeWidget(`id("SMTPUser"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_SMTP_USER"]:"");
}

/**
  * Function stores option 
  * "User Name" (SMTP Settings)
  */
void StoreSMTPUser (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_SMTP_USER"] = tostring(UI::QueryWidget(`id("SMTPUser"), `Value));
}

/**
  * Function initializes option 
  * "Password" (SMTP Settings)
  */
void InitSMTPPassword (string key) {
  UI::ChangeWidget(`id("SMTPPassword"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_SMTP_PASSWORD"]:"");
}

/**
  * Function stores option 
  * "Password" (SMTP Settings)
  */
void StoreSMTPPassword (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_SMTP_PASSWORD"] = tostring(UI::QueryWidget(`id("SMTPPassword"), `Value));
}

/**
  * Function initializes option 
  * "Notification To"
  */
void InitNotificationTo (string key) {
  UI::ChangeWidget(`id("NotificationTo"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_TO"]:"");
}

/**
  * Function stores option 
  * "Notification To"
  */
void StoreNotificationTo (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_TO"] = tostring(UI::QueryWidget(`id("NotificationTo"), `Value));
}

/**
  * Function initializes option 
  * "Notification CC"
  */
void InitNotificationCC (string key) {
  UI::ChangeWidget(`id("NotificationCC"), `Value, Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_CC"]:"");
}

/**
  * Function stores option 
  * "Notification CC"
  */
void StoreNotificationCC (string key, map event) {
  Kdump::KDUMP_SETTINGS["KDUMP_NOTIFICATION_CC"] = tostring(UI::QueryWidget(`id("NotificationCC"), `Value));
}


/**
  * Function validates options in 
  * "Dump Format"
  * install makedumpfile if KDUMP_DUMPFORMAT == "compressed"
  */

boolean ValidEmail (string key, map event) {

	Popup::Message(key);
	return true;
}

/* EOF */
}
